#include "globals.hh"
#include <iomanip>                

#include "B4aPhysicsList.hh"

#include "G4ParticleDefinition.hh"
#include "G4ParticleWithCuts.hh"
#include "G4ProcessManager.hh"
#include "G4ProcessVector.hh"
#include "G4ParticleTypes.hh"
#include "G4ParticleTable.hh"
#include "G4BosonConstructor.hh"
#include "G4LeptonConstructor.hh"
#include "G4MesonConstructor.hh"
#include "G4BaryonConstructor.hh"
#include "G4IonConstructor.hh"
#include "G4ShortLivedConstructor.hh"
#include "G4Material.hh"
#include "G4MaterialTable.hh"
#include "G4SystemOfUnits.hh"
#include "G4HadronElasticProcess.hh"

//#include "G4NeutronHPElasticModel.hh"
#include "G4NeutronHPElasticData.hh"
#include "G4NeutronHPElastic.hh"
#include "G4NeutronHPJENDLHEElasticData.hh"

#include "G4HadronInelasticProcess.hh"
//#include "G4NeutronHPInelasticModel.hh"
#include "G4NeutronHPInelasticData.hh"
#include "G4NeutronHPInelastic.hh"
#include "G4NeutronHPJENDLHEInelasticData.hh"

#include "G4HadronCaptureProcess.hh"
#include "G4HadronCaptureDataSet.hh"
//#include "G4NeutronHPCaptureModel.hh"
#include "G4NeutronHPCaptureData.hh"
#include "G4NeutronHPCapture.hh"


B4aPhysicsList::B4aPhysicsList():  G4VUserPhysicsList()
{
  fParaWorldName.clear();
  SetVerboseLevel(1);  
}



B4aPhysicsList::~B4aPhysicsList()
{
  fParaWorldName.clear();
}



void B4aPhysicsList::ConstructParticle()
{
  
  //ConstructAllBosons();
  ConstructAllLeptons();
  //ConstructAllMesons();
  ConstructAllBaryons();
  ConstructAllIons();
  //ConstructAllShortLiveds();
}



void B4aPhysicsList::ConstructAllBosons()
{
  // Construct all bosons
  //G4BosonConstructor pConstructor;
  //pConstructor.ConstructParticle();
}



void B4aPhysicsList::ConstructAllLeptons()
{
  // Construct all leptons
  G4LeptonConstructor pConstructor;
  pConstructor.ConstructParticle();
}



void B4aPhysicsList::ConstructAllMesons()
{
  //  Construct all mesons
  //G4MesonConstructor pConstructor;
  //pConstructor.ConstructParticle();
}



void B4aPhysicsList::ConstructAllBaryons()
{
  //  Construct all barions
  G4BaryonConstructor pConstructor;
  pConstructor.ConstructParticle();
}



void B4aPhysicsList::ConstructAllIons()
{
  //  Construct light ions
  G4IonConstructor pConstructor;
  pConstructor.ConstructParticle();  
}



void B4aPhysicsList::ConstructAllShortLiveds()
{
  //  Construct  resonaces and quarks
  //G4ShortLivedConstructor pConstructor;
  //pConstructor.ConstructParticle();  
}



void B4aPhysicsList::ConstructProcess()
{
  AddTransportation();
  //AddScoringProcess();
  AddBiasingProcess();
  ConstructEM();
  //ConstructLeptHad();
  ConstructHad();
  ConstructGeneral();
}



#include "G4ComptonScattering.hh"
#include "G4GammaConversion.hh"
#include "G4PhotoElectricEffect.hh"

#include "G4eMultipleScattering.hh"
#include "G4MuMultipleScattering.hh"
#include "G4hMultipleScattering.hh"

#include "G4eIonisation.hh"
#include "G4eBremsstrahlung.hh"
#include "G4eplusAnnihilation.hh"

#include "G4MuIonisation.hh"
#include "G4MuBremsstrahlung.hh"
#include "G4MuPairProduction.hh"

#include "G4hIonisation.hh"

void B4aPhysicsList::ConstructEM()
{
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();
     
    if (particleName == "gamma") {
    // gamma
      // Construct processes for gamma
      pmanager->AddDiscreteProcess(new G4GammaConversion());
      pmanager->AddDiscreteProcess(new G4ComptonScattering());      
      pmanager->AddDiscreteProcess(new G4PhotoElectricEffect());

    } else if (particleName == "e-") {
    //electron
      // Construct processes for electron
      pmanager->AddProcess(new G4eMultipleScattering(),-1,1,1);
      pmanager->AddProcess(new G4eIonisation(),-1,2,2);
      pmanager->AddProcess(new G4eBremsstrahlung(),-1,-1,3);
  
    } else if (particleName == "e+") {
    //positron
      // Construct processes for positron
     pmanager->AddProcess(new G4eMultipleScattering(),-1,1,1);
     
     pmanager->AddProcess(new G4eIonisation(),-1,2,2);
     pmanager->AddProcess(new G4eBremsstrahlung(),-1,-1,3);      
     pmanager->AddProcess(new G4eplusAnnihilation(),0,-1,4);
  
    } else if( particleName == "mu+" || 
               particleName == "mu-"    ) {
    //muon  
     // Construct processes for muon+
     pmanager->AddProcess(new G4MuMultipleScattering(),-1,1,1);
     pmanager->AddProcess(new G4MuIonisation(),-1,2,2);
     pmanager->AddProcess(new G4MuBremsstrahlung(),-1,-1,3);
     pmanager->AddProcess(new G4MuPairProduction(),-1,-1,4);       
     
    }  else if (particleName=="neutron") {
      G4cout<<neutrons_type<<' '<<neutrons_elastic<<'\n';
      pmanager= G4Neutron::Neutron()-> GetProcessManager();
      if(neutrons_type&1) {
        G4HadronElasticProcess* theNeutronElasticProcess= new G4HadronElasticProcess();
        G4NeutronHPElastic* theNeutronElasticModel= new G4NeutronHPElastic();
        if (neutrons_elastic==0) {
          //For example Elastic scattering below 20 MeV
          // Cross Section Data set
          G4NeutronHPElasticData* theHPElasticData= new G4NeutronHPElasticData();
                   //wysokich energii 
          theNeutronElasticProcess->AddDataSet(theNeutronElasticModel->GiveHPXSectionDataSet());
          G4NeutronHPJENDLHEElasticData* theJENDLHEElasticData= new G4NeutronHPJENDLHEElasticData();
          theNeutronElasticProcess->AddDataSet(theJENDLHEElasticData);
              //koniec z wysokich
                   //przekroje elastycznego malych energii
          theNeutronElasticProcess->AddDataSet(theHPElasticData);
          // Model
          G4NeutronHPElastic* theNeutronHPElasticModel= new G4NeutronHPElastic();
          theNeutronElasticProcess->RegisterMe(theNeutronHPElasticModel);
          theNeutronElasticModel->SetMinEnergy(20.0*MeV);
          theNeutronElasticProcess->RegisterMe(theNeutronElasticModel);
          pmanager->AddDiscreteProcess(theNeutronElasticProcess);
          }
        if (neutrons_elastic==1) {
          //For example Elastic scattering below 20 MeV
        //  G4HadronElasticProcess* theNeutronElasticProcess= new G4HadronElasticProcess();
          // Model
          theNeutronElasticProcess->RegisterMe(theNeutronElasticModel);
          // Cross Section Data set
          theNeutronElasticProcess->AddDataSet( theNeutronElasticModel->GiveHPXSectionDataSet() );

          pmanager->AddDiscreteProcess( theNeutronElasticProcess);
          }
        }
      if (neutrons_type&2) {
        G4NeutronHPInelastic* theNeutronInelasticModel= new G4NeutronHPInelastic();
        G4HadronInelasticProcess* theNeutronInelasticProcess= new
                                  G4HadronInelasticProcess("neutronInelastic",G4Neutron::Neutron());
        if (neutrons_elastic==0) {
          G4NeutronHPInelasticData* theHPInelasticData= new G4NeutronHPInelasticData();
          theNeutronInelasticProcess->AddDataSet(theNeutronInelasticModel->GiveHPXSectionDataSet());
          G4NeutronHPJENDLHEInelasticData* theJENDLHEInelasticData= new G4NeutronHPJENDLHEInelasticData();
          theNeutronInelasticProcess->AddDataSet(theJENDLHEInelasticData);
          theNeutronInelasticProcess->AddDataSet(theHPInelasticData);
          G4NeutronHPInelastic* theNeutronHPInelasticModel= new G4NeutronHPInelastic();
          theNeutronInelasticProcess->RegisterMe(theNeutronHPInelasticModel);
          theNeutronInelasticModel->SetMinEnergy(20.0*MeV);
          theNeutronInelasticProcess->RegisterMe(theNeutronInelasticModel);
          pmanager->AddDiscreteProcess(theNeutronInelasticProcess);
          }
        if (neutrons_elastic==1){
      //    G4HadronInelasticProcess* theNeutronInelasticProcess= new G4HadronInelasticProcess();
          theNeutronInelasticProcess->RegisterMe(theNeutronInelasticModel);
          theNeutronInelasticProcess->AddDataSet(theNeutronInelasticModel->GiveHPXSectionDataSet());
          pmanager->AddDiscreteProcess(theNeutronInelasticProcess);
          }
        }
      if (neutrons_type&4) {
        G4HadronCaptureProcess* theNeutronCaptureProcess= new G4HadronCaptureProcess();
        G4NeutronHPCapture* theNeutronCaptureModel= new G4NeutronHPCapture();
        if (neutrons_elastic==0) {
          G4NeutronHPCaptureData* theHPCaptureData= new G4NeutronHPCaptureData();
          G4HadronCaptureDataSet* theHadronCaptureDataSet= new G4HadronCaptureDataSet();
          theNeutronCaptureProcess->AddDataSet(theNeutronCaptureModel->GiveHPXSectionDataSet());
          theNeutronCaptureProcess->AddDataSet(theHadronCaptureDataSet);
          theNeutronCaptureProcess->AddDataSet(theHPCaptureData);
          G4NeutronHPCapture* theNeutronHPCaptureModel= new G4NeutronHPCapture();
          theNeutronCaptureProcess->RegisterMe(theNeutronHPCaptureModel);
          theNeutronCaptureModel->SetMinEnergy(20.0*MeV);
          theNeutronCaptureProcess->RegisterMe(theNeutronCaptureModel);
          // theNeutronElasticProcess->RegisterMe(theNeutronElasticModel);
          pmanager->AddDiscreteProcess(theNeutronCaptureProcess);
          }
        if (neutrons_elastic==1) {
          theNeutronCaptureProcess->RegisterMe(theNeutronCaptureModel);
          theNeutronCaptureProcess->AddDataSet(theNeutronCaptureModel->GiveHPXSectionDataSet());
          pmanager->AddDiscreteProcess(theNeutronCaptureProcess);
          }
        }
      }







else if( particleName == "GenericIon" ) {
      pmanager->AddProcess(new G4hMultipleScattering(),-1,1,1);
      pmanager->AddProcess(new G4hIonisation(),-1,2,2); 
    } else { 
      if ((particle->GetPDGCharge() != 0.0) && 
          (particle->GetParticleName() != "chargedgeantino")&&
          (!particle->IsShortLived()) ) {
     // all others charged particles except geantino
       pmanager->AddProcess(new G4hMultipleScattering(),-1,1,1);
       pmanager->AddProcess(new G4hIonisation(),-1,2,2);       
     }
    }
  }
}



// Hadron Processes

#include "G4HadronElasticProcess.hh"
#include "G4HadronFissionProcess.hh"
#include "G4HadronCaptureProcess.hh"

// Low-energy Models

#include "G4HadronElastic.hh"
#include "G4NeutronRadCapture.hh"
#include "G4LFission.hh"

// -- generator models

#include "G4FermiBreakUp.hh"
#include "G4Fancy3DNucleus.hh"
#include "G4CascadeInterface.hh"

// Cross sections
#include "G4IonsShenCrossSection.hh"
#include "G4TripathiCrossSection.hh"
#include "G4TripathiLightCrossSection.hh"

//
// ConstructHad()
//
// Makes discrete physics processes for the hadrons
// The processes are: Elastic scattering, Inelastic scattering,
// Fission (for neutron only), and Capture (neutron).
//

void B4aPhysicsList::ConstructHad()
{
 

  // Elastic process
  G4HadronElasticProcess* theElasticProcess = new G4HadronElasticProcess;
  G4HadronElastic* theElasticModel = new G4HadronElastic;
  theElasticProcess->RegisterMe(theElasticModel);

  theParticleIterator->reset();
  while ((*theParticleIterator)()) {
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();
      
      
     else if (particleName == "neutron") {         
      // elastic scattering
      pmanager->AddDiscreteProcess(theElasticProcess);

      // inelastic scattering
      G4NeutronInelasticProcess* theInelasticProcess = 
                                    new G4NeutronInelasticProcess("inelastic");
      theInelasticProcess->RegisterMe(bertini);
      theInelasticProcess->RegisterMe(theTheoModel);
      pmanager->AddDiscreteProcess(theInelasticProcess);

      // fission
      G4HadronFissionProcess* theFissionProcess = new G4HadronFissionProcess;
      G4LFission* theFissionModel = new G4LFission;
      theFissionProcess->RegisterMe(theFissionModel);
      pmanager->AddDiscreteProcess(theFissionProcess);

      // capture
      G4HadronCaptureProcess* theCaptureProcess = new G4HadronCaptureProcess;
      G4NeutronRadCapture* theCaptureModel = new G4NeutronRadCapture;
      theCaptureProcess->RegisterMe(theCaptureModel);
      pmanager->AddDiscreteProcess(theCaptureProcess);

    }       
      else if (particleName == "deuteron") {
         pmanager->AddDiscreteProcess(theElasticProcess);
         G4DeuteronInelasticProcess* theInelasticProcess = 
                            new G4DeuteronInelasticProcess("inelastic");
         theInelasticProcess->RegisterMe(binaryCascade);
         theInelasticProcess->RegisterMe(qmd);
         theInelasticProcess->AddDataSet(shenXS);
         theInelasticProcess->AddDataSet(tripXS);
         theInelasticProcess->AddDataSet(tripLightXS);
         pmanager->AddDiscreteProcess(theInelasticProcess);
      }
      else if (particleName == "triton") {
         pmanager->AddDiscreteProcess(theElasticProcess);
         G4TritonInelasticProcess* theInelasticProcess = 
                            new G4TritonInelasticProcess("inelastic");
         theInelasticProcess->RegisterMe(binaryCascade);
         theInelasticProcess->RegisterMe(qmd);
         theInelasticProcess->AddDataSet(shenXS);
         theInelasticProcess->AddDataSet(tripXS);
         theInelasticProcess->AddDataSet(tripLightXS);
         pmanager->AddDiscreteProcess(theInelasticProcess);
      }

      else if (particleName == "alpha") {
         pmanager->AddDiscreteProcess(theElasticProcess);
         G4AlphaInelasticProcess* theInelasticProcess = 
                            new G4AlphaInelasticProcess("inelastic");
         theInelasticProcess->RegisterMe(binaryCascade);
         theInelasticProcess->RegisterMe(qmd);
         theInelasticProcess->AddDataSet(shenXS);
         theInelasticProcess->AddDataSet(tripXS);
         theInelasticProcess->AddDataSet(tripLightXS);
         pmanager->AddDiscreteProcess(theInelasticProcess);

    } 
  }
}



void B4aPhysicsList::ConstructLeptHad()
{;}



#include "G4Decay.hh"
void B4aPhysicsList::ConstructGeneral()
{
  G4Decay* theDecayProcess = new G4Decay();
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    if (theDecayProcess->IsApplicable(*particle)) { 
      pmanager ->AddProcess(theDecayProcess);
      pmanager ->SetProcessOrdering(theDecayProcess, idxPostStep);
      pmanager ->SetProcessOrdering(theDecayProcess, idxAtRest);
    }
  }
}



void B4aPhysicsList::SetCuts()
{
  if (verboseLevel >0)
  {
    G4cout << "B03PhysicsList::SetCuts:";
    G4cout << "CutLength : " << defaultCutValue/mm << " (mm)" << G4endl;
  }  
  //   "G4VUserPhysicsList::SetCutsWithDefault" method sets 
  //   the default cut value for all particle types 
  SetCutsWithDefault();   
}



